@model API.Operaciones.Gasto

@{
    ViewBag.Title = "Eliminar";
}

<h3 class="alert alert-danger">¿Está seguro que desea eliminar este registro?</h3>

<div class="container-fluid">
    <div class="row deshabilitar">
        <div class="col-xs-12">
            <div class="card">
                <div class="card-header">
                    <div class="card-title">
                        <div class="title"><b>@ViewBag.Title Gasto</b></div>
                    </div>
                </div>
                <div class="card-body">

                    @using (Html.BeginForm("Edit", "Gastos", FormMethod.Post, new { enctype = "multipart/form-data" }))
                    {
                        @Html.AntiForgeryToken()

                        @Html.HiddenFor(model => model.Id)
                        @Html.HiddenFor(model => model.Status)
                        @Html.HiddenFor(model => model.ViajeId)
                        @Html.HiddenFor(model => model.UsuarioId)
                        @Html.HiddenFor(model => model.FechaCarga)
                        @Html.HiddenFor(model => model.CentroCostoId)
                        @Html.HiddenFor(model => model.FechaAutorizacionRechazo)
                        @Html.HiddenFor(model => model.NotasAutorizacionRechazo)
                        @Html.HiddenFor(model => model.UsuarioAutorizacionRechazoId)

                        <div class="form">
                            @Html.ValidationSummary(true, "", new { @class = "label-blue-alt" })

                            <div class="clearfix"></div>

                            <div class="sub-title">
                                <span class="fa fa-bars text-muted"></span> Tipo de Documento
                            </div>

                            <div class="form-group col-xs-12 col-sm-12 col-md-12 col-lg-12">
                                @Html.LabelFor(model => model.TipoDocumento, htmlAttributes: new { @class = "control-label" })
                                @Html.EnumDropDownListSpecialFor(model => model.TipoDocumento)
                                @Html.ValidationMessageFor(model => model.TipoDocumento, "", new { @class = "text-danger" })
                            </div>

                            <div class="clearfix"></div>

                            <div class="sub-title">
                                <span class="fa fa-bars text-muted"></span> Información General
                            </div>

                            <div class="form-group col-xs-12 col-sm-6 col-md-4 col-lg-4">
                                @Html.LabelFor(model => model.FechaDocumento, htmlAttributes: new { @class = "control-label" })
                                @Html.EditorFor(model => model.FechaDocumento)
                                @Html.ValidationMessageFor(model => model.FechaDocumento, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group col-xs-12 col-sm-6 col-md-4 col-lg-4">
                                @Html.LabelFor(model => model.SubTotal, htmlAttributes: new { @class = "control-label" })
                                @Html.EditorFor(model => model.SubTotal, new { @class = "form-control", @readonly = "readonly" })
                                @Html.ValidationMessageFor(model => model.SubTotal, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group col-xs-12 col-sm-6 col-md-4 col-lg-4">
                                @Html.LabelFor(model => model.Total, htmlAttributes: new { @class = "control-label" })
                                @Html.EditorFor(model => model.Total, new { @class = "form-control", @readonly = "readonly" })
                                @Html.ValidationMessageFor(model => model.Total, "", new { @class = "text-danger" })
                            </div>

                            <div class="Cfdi" hidden>
                                <div class="clearfix"></div>

                                <div class="sub-title">
                                    <span class="fa fa-bars text-muted"></span> Archivos
                                </div>

                                <div class="section">
                                    <div class="container-fluid">
                                        <div class="row">

                                            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
                                                <div class="panel panel-primary">
                                                    <div class="panel-heading">
                                                        <h3 class="panel-title">XML</h3>
                                                    </div>
                                                    <div class="panel-body">
                                                        <div class="form-group col-xs-12 col-sm-12 col-md-12 col-lg-12">
                                                            @Html.FileEditorFor(model => model.ArchivoXml)
                                                            @Html.ValidationMessageFor(model => model.ArchivoXml, "", new { @class = "text-danger" })
                                                            @Html.HiddenFor(model => model.NombreArchivoXml)
                                                        </div>
                                                        <div class="btn-group form-group col-xs-12 col-sm-12 col-md-12 col-lg-12">
                                                            @if (Model.NombreArchivoXml != null)
                                                            {
                                                                <button type="button" id="Descarga1" class="btn btn-success" style="width: 233px" onclick="location.href='@Url.Action("ObtenerArchivos", "Home", new { pathCompleto = Model.NombreArchivoXml })'"><span class="glyphicon glyphicon-download-alt"> Descargar</span></button>
                                                                <button type="button" id="Remover1" class="btn btn-danger" onclick="$('#NombreArchivoXml').val(''); $('#Archivo1').val(''); $('#imagen1').fadeOut('slow'); $('#Descarga1').fadeOut('slow'); $('#Remover1').fadeOut('slow');"><span class="glyphicon glyphicon-remove-sign"></span></button>
                                                            }
                                                        </div>
                                                        <div class="form-group col-xs-12 col-sm-12 col-md-12 col-lg-12">
                                                            @if (Path.GetExtension(Model.NombreArchivoXml) == ".jpg" || Path.GetExtension(Model.NombreArchivoXml) == ".png" || Path.GetExtension(Model.NombreArchivoXml) == ".bmp" || Path.GetExtension(Model.NombreArchivoXml) == ".gif")
                                                            {
                                                                <img id="imagen1" src="data:image;base64,@Convert.ToBase64String(Model.ArchivoFisicoXml)" style="border: solid; width:auto; height:auto; max-height: 272px; max-width: 272px;" />
                                                            }
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>

                                            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
                                                <div class="panel panel-primary">
                                                    <div class="panel-heading">
                                                        <h3 class="panel-title">PDF</h3>
                                                    </div>
                                                    <div class="panel-body">
                                                        <div class="form-group col-xs-12 col-sm-12 col-md-12 col-lg-12">
                                                            @Html.FileEditorFor(model => model.ArchivoPdf)
                                                            @Html.ValidationMessageFor(model => model.ArchivoPdf, "", new { @class = "text-danger" })
                                                            @Html.HiddenFor(model => model.NombreArchivoPdf)
                                                        </div>
                                                        <div class="btn-group form-group col-xs-12 col-sm-12 col-md-12 col-lg-12">
                                                            @if (Model.NombreArchivoPdf != null)
                                                            {
                                                                <button type="button" id="Descarga2" class="btn btn-success" style="width: 233px" onclick="location.href='@Url.Action("ObtenerArchivos", "Home", new { pathCompleto = Model.NombreArchivoPdf })'"><span class="glyphicon glyphicon-download-alt"> Descargar</span></button>
                                                                <button type="button" id="Remover2" class="btn btn-danger" onclick="$('#NombreArchivoPdf').val(''); $('#ArchivoPdf').val(''); $('#imagen2').fadeOut('slow'); $('#Descarga2').fadeOut('slow'); $('#Remover2').fadeOut('slow');"><span class="glyphicon glyphicon-remove-sign"></span></button>
                                                            }
                                                        </div>
                                                        <div class="form-group col-xs-12 col-sm-12 col-md-12 col-lg-12">
                                                            @if (Path.GetExtension(Model.NombreArchivoPdf) == ".jpg" || Path.GetExtension(Model.NombreArchivoPdf) == ".png" || Path.GetExtension(Model.NombreArchivoPdf) == ".bmp" || Path.GetExtension(Model.NombreArchivoPdf) == ".gif")
                                                            {
                                                                <img id="imagen2" src="data:image;base64,@Convert.ToBase64String(Model.ArchivoFisicoPdf)" style="border: solid; width:auto; height:auto; max-height: 272px; max-width: 272px;" />
                                                            }
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                            </div>

                            <div class="Comprobante" hidden>
                                <div class="clearfix"></div>

                                <div class="sub-title">
                                    <span class="fa fa-bars text-muted"></span> Archivo
                                </div>

                                <div class="section">
                                    <div class="container-fluid">
                                        <div class="row">

                                            <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                                                <div class="panel panel-primary">
                                                    <div class="panel-heading">
                                                        <h3 class="panel-title">Soporte</h3>
                                                    </div>
                                                    <div class="panel-body">
                                                        <div class="form-group col-xs-12 col-sm-12 col-md-12 col-lg-12">
                                                            @Html.FileEditorFor(model => model.ArchivoSoporte)
                                                            @Html.ValidationMessageFor(model => model.ArchivoSoporte, "", new { @class = "text-danger" })
                                                            @Html.HiddenFor(model => model.NombreArchivoSoporte)
                                                        </div>
                                                        <div class="btn-group form-group col-xs-12 col-sm-12 col-md-12 col-lg-12">
                                                            @if (Model.NombreArchivoSoporte != null)
                                                            {
                                                                <button type="button" id="Descarga1" class="btn btn-success" style="width: 233px" onclick="location.href='@Url.Action("ObtenerArchivos", "Home", new { pathCompleto = Model.NombreArchivoSoporte })'"><span class="glyphicon glyphicon-download-alt"> Descargar</span></button>
                                                                <button type="button" id="Remover1" class="btn btn-danger" onclick="$('#NombreArchivoSoporte').val(''); $('#Archivo1').val(''); $('#imagen1').fadeOut('slow'); $('#Descarga1').fadeOut('slow'); $('#Remover1').fadeOut('slow');"><span class="glyphicon glyphicon-remove-sign"></span></button>
                                                            }
                                                        </div>
                                                        <div class="form-group col-xs-12 col-sm-12 col-md-12 col-lg-12">
                                                            @if (Path.GetExtension(Model.NombreArchivoSoporte) == ".jpg" || Path.GetExtension(Model.NombreArchivoSoporte) == ".png" || Path.GetExtension(Model.NombreArchivoSoporte) == ".bmp" || Path.GetExtension(Model.NombreArchivoSoporte) == ".gif")
                                                            {
                                                                <img id="imagen1" src="data:image;base64,@Convert.ToBase64String(Model.ArchivoFisicoSoporte)" style="border: solid; width:auto; height:auto; max-height: 272px; max-width: 272px;" />
                                                            }
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="clearfix"></div>

                            <div class="sub-title">
                                <span class="fa fa-bars text-muted"></span> Notas
                            </div>

                            <div class="form-group col-xs-12 col-sm-12 col-md-12 col-lg-12">
                                @Html.LabelFor(model => model.Notas, htmlAttributes: new { @class = "control-label" })
                                @Html.TextAreaFor(model => model.Notas, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Notas, "", new { @class = "text-danger" })
                            </div>

                            <div class="sub-title">
                                <span class="fa fa-bars text-muted"></span> Aprobación / Rechazo
                            </div>

                            <div class="form-group col-xs-12 col-sm-6 col-md-4 col-lg-4">
                                @Html.LabelFor(model => model.Status, htmlAttributes: new { @class = "control-label" })
                                @Html.EnumDropDownListSpecialFor(model => model.Status)
                                @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group col-xs-12 col-sm-6 col-md-4 col-lg-4">
                                @Html.LabelFor(model => model.UsuarioAutorizacionRechazoId, htmlAttributes: new { @class = "control-label" })
                                @Html.EditorFor(model => model.UsuarioAutorizacionRechazo.NombreCompleto, new { @class = "form-control", @readonly = "readonly" })
                                @Html.ValidationMessageFor(model => model.UsuarioAutorizacionRechazoId, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group col-xs-12 col-sm-6 col-md-4 col-lg-4">
                                @Html.LabelFor(model => model.FechaAutorizacionRechazo, htmlAttributes: new { @class = "control-label" })
                                @Html.EditorFor(model => model.FechaAutorizacionRechazo, new { @class = "form-control", @readonly = "readonly" })
                                @Html.ValidationMessageFor(model => model.FechaAutorizacionRechazo, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group col-xs-12 col-sm-12 col-md-12 col-lg-12">
                                @Html.LabelFor(model => model.NotasAutorizacionRechazo, htmlAttributes: new { @class = "control-label" })
                                @Html.EditorFor(model => model.NotasAutorizacionRechazo, new { @class = "form-control", @readonly = "readonly" })
                                @Html.ValidationMessageFor(model => model.NotasAutorizacionRechazo, "", new { @class = "text-danger" })
                            </div>

                            <div class="clearfix"></div>
                            <hr />
                            <div class="form-group col-xs-12 col-sm-6 col-md-4 col-lg-3 pull-right">
                                @Html.ActionLink("Regresar", "Edit", "Viajes", new { @id = Model.ViajeId }, new { @class = "btn btn-primary" })
                                <button type="submit" class="btn btn-success">Eliminar</button>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>